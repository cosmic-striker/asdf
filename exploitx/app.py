from flask import Flask, render_template, request, redirect, url_for, flash, session, make_response
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from datetime import datetime
from werkzeug.security import generate_password_hash, check_password_hash
import os
import jinja2
from markupsafe import Markup
from werkzeug.exceptions import InternalServerError
import re
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import socket
import logging

app = Flask(__name__)

# Setup logging
logging.basicConfig(level=logging.INFO)

app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'your-secret-key-here')  # Change this in production

# SMTP Configuration
app.config['SMTP_SERVER'] = os.environ.get('SMTP_SERVER', 'smtp.gmail.com')
app.config['SMTP_PORT'] = int(os.environ.get('SMTP_PORT', '587'))
app.config['SMTP_USERNAME'] = os.environ.get('SMTP_USERNAME', '')
app.config['SMTP_PASSWORD'] = os.environ.get('SMTP_PASSWORD', '')
app.config['ADMIN_EMAIL'] = os.environ.get('ADMIN_EMAIL', '')
app.config['ENABLE_LOGIN_EMAILS'] = os.environ.get('ENABLE_LOGIN_EMAILS', 'false').lower() == 'true'

# Use environment variable for database URI, fallback to localhost for local development
database_uri = os.environ.get('SQLALCHEMY_DATABASE_URI', 'mysql+pymysql://root:root@localhost/exploitx')
app.config['SQLALCHEMY_DATABASE_URI'] = database_uri
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SQLALCHEMY_ENGINE_OPTIONS'] = {
    'pool_size': 10,
    'pool_recycle': 3600,
    'pool_pre_ping': True
}
app.config['SESSION_COOKIE_SECURE'] = True
app.config['SESSION_COOKIE_HTTPONLY'] = True
app.config['SESSION_COOKIE_SAMESITE'] = 'Lax'
app.config['PERMANENT_SESSION_LIFETIME'] = 7200  # 2 hours
db = SQLAlchemy(app)
login_manager = LoginManager(app)
login_manager.login_view = 'admin_login'
login_manager.login_message = 'Please log in to access this page.'
login_manager.login_message_category = 'error'

def send_login_notification_email(username, user_role, ip_address, user_agent):
    """Send email notification when someone logs into admin panel"""
    if not app.config['ENABLE_LOGIN_EMAILS']:
        app.logger.info("Email notifications are disabled. Skipping.")
        return
    if not app.config['ADMIN_EMAIL']:
        app.logger.warning("ADMIN_EMAIL not set. Skipping email notification.")
        return

    app.logger.info(f"Attempting to send login notification for user '{username}' to {app.config['ADMIN_EMAIL']}")
    
    try:
        # Create message
        msg = MIMEMultipart()
        msg['From'] = app.config['SMTP_USERNAME']
        msg['To'] = app.config['ADMIN_EMAIL']
        msg['Subject'] = f'Admin Login Alert - {username}'
        
        # Create email body
        body = f"""
        <html>
        <body>
            <h2>Admin Panel Login Alert</h2>
            <p><strong>Username:</strong> {username}</p>
            <p><strong>Role:</strong> {user_role}</p>
            <p><strong>IP Address:</strong> {ip_address}</p>
            <p><strong>User Agent:</strong> {user_agent}</p>
            <p><strong>Timestamp:</strong> {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}</p>
            <hr>
            <p><small>This is an automated security notification from your ExploitX CTF Team website.</small></p>
        </body>
        </html>
        """
        msg.attach(MIMEText(body, 'html'))
        
        # Send email
        app.logger.info(f"Connecting to SMTP server {app.config['SMTP_SERVER']}:{app.config['SMTP_PORT']}...")
        server = smtplib.SMTP(app.config['SMTP_SERVER'], app.config['SMTP_PORT'])
        
        app.logger.info("Starting TLS...")
        server.starttls()
        
        app.logger.info(f"Logging in with username {app.config['SMTP_USERNAME']}...")
        server.login(app.config['SMTP_USERNAME'], app.config['SMTP_PASSWORD'])
        
        app.logger.info("Sending message...")
        server.send_message(msg)
        
        app.logger.info("Quitting server...")
        server.quit()
        
        app.logger.info(f"Login notification email sent successfully for user: {username}")
        
    except Exception as e:
        app.logger.error(f"Failed to send login notification email: {e}", exc_info=True)

# Create tables if they don't exist (only in development, not in Docker)
if os.environ.get('FLASK_ENV') == 'development' and 'localhost' in database_uri:
    with app.app_context():
        db.create_all()

# Mobile detection function
def is_mobile_device(user_agent):
    """Detect if the request is from a mobile device"""
    if not user_agent:
        return False
    
    mobile_patterns = [
        r'Android', r'iPhone', r'iPad', r'iPod', r'BlackBerry', r'Windows Phone',
        r'Mobile', r'Opera Mini', r'IEMobile', r'Mobile Safari'
    ]
    
    for pattern in mobile_patterns:
        if re.search(pattern, user_agent, re.IGNORECASE):
            return True
    return False

# Error Handlers
@app.errorhandler(404)
def page_not_found(e):
    return render_template('errors/404.html'), 404

@app.errorhandler(500)
def internal_server_error(e):
    return render_template('errors/500.html'), 500

# Add nl2br filter
@app.template_filter('nl2br')
def nl2br(value):
    if not value:
        return ""
    return Markup(value.replace('\n', '<br>'))

@app.after_request
def add_admin_cache_control(response):
    """Ensure admin pages are not cached."""
    if request.path.startswith('/expx'):
        response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        response.headers['Pragma'] = 'no-cache'
        response.headers['Expires'] = '0'
    return response

# Database Models
class User(UserMixin, db.Model):
    __tablename__ = 'user'
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password_hash = db.Column(db.String(255), nullable=False)
    is_admin = db.Column(db.Boolean, default=False)
    is_super_admin = db.Column(db.Boolean, default=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    last_login = db.Column(db.DateTime)

    @property
    def is_privileged(self):
        """Check if user has admin or super admin rights."""
        return self.is_admin or self.is_super_admin

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

    def can_delete_user(self, target_user):
        # Super admin can delete anyone except other super admins
        if self.is_super_admin:
            return not target_user.is_super_admin
        # Regular admin can only delete non-admin users
        return self.is_admin and not target_user.is_admin and not target_user.is_super_admin

class Event(db.Model):
    __tablename__ = 'event'
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    description = db.Column(db.Text, nullable=False)
    date = db.Column(db.DateTime, nullable=False)
    location = db.Column(db.String(200))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class TeamMember(db.Model):
    __tablename__ = 'team_member'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    role = db.Column(db.String(100))
    bio = db.Column(db.Text)
    image_url = db.Column(db.String(200))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class ContactInfo(db.Model):
    __tablename__ = 'contact_info'
    id = db.Column(db.Integer, primary_key=True)
    phone = db.Column(db.String(20))
    email = db.Column(db.String(120))
    location = db.Column(db.String(200))
    office_hours = db.Column(db.String(200))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class Contact(db.Model):
    __tablename__ = 'contact'
    id = db.Column(db.Integer, primary_key=True)
    full_name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(120), nullable=False)
    subject = db.Column(db.String(200), nullable=False)
    message = db.Column(db.Text, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    is_read = db.Column(db.Boolean, default=False)

class TeamApplication(db.Model):
    __tablename__ = 'team_application'
    id = db.Column(db.Integer, primary_key=True)
    full_name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(120), nullable=False)
    phone = db.Column(db.String(20))
    role = db.Column(db.String(100), nullable=False)
    experience = db.Column(db.Text)
    why_join = db.Column(db.Text, nullable=False)
    status = db.Column(db.String(20), default='pending')  # pending, approved, rejected
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    notes = db.Column(db.Text)

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# Routes
@app.route('/')
def index():
    events = Event.query.filter(Event.date >= datetime.utcnow()).order_by(Event.date.asc()).limit(3).all()
    members = TeamMember.query.all()
    contact_info = ContactInfo.query.first()
    
    # Temporarily disable mobile detection to prevent 500 error
    # TODO: Re-implement mobile template when ready
    # user_agent = request.headers.get('User-Agent')
    # if is_mobile_device(user_agent):
    #     return render_template('index_mobile.html', events=events, members=members, contact_info=contact_info)
    # else:
    return render_template('index.html', events=events, members=members, contact_info=contact_info)

@app.route('/about')
def about():
    return render_template('about.html')

@app.route('/team')
def team():
    members = TeamMember.query.all()
    return render_template('team.html', members=members)

@app.route('/events')
def events():
    upcoming_events = Event.query.filter(Event.date >= datetime.utcnow()).order_by(Event.date.asc()).all()
    past_events = Event.query.filter(Event.date < datetime.utcnow()).order_by(Event.date.desc()).all()
    return render_template('events.html', upcoming_events=upcoming_events, past_events=past_events)

@app.route('/contact', methods=['GET', 'POST'])
def contact():
    contact_info = ContactInfo.query.first()
    if request.method == 'POST':
        try:
            full_name = request.form.get('full_name')
            email = request.form.get('email')
            subject = request.form.get('subject')
            message = request.form.get('message')
            
            if not all([full_name, email, subject, message]):
                flash('All fields are required.', 'error')
                return redirect(url_for('contact'))
            
            contact = Contact(
                full_name=full_name,
                email=email,
                subject=subject,
                message=message
            )
            db.session.add(contact)
            db.session.commit()
            flash('Message sent successfully! We will get back to you soon.', 'success')
            return redirect(url_for('index', _anchor='contact'))
        except Exception as e:
            db.session.rollback()
            flash('An error occurred while sending your message. Please try again.', 'error')
            return redirect(url_for('contact'))
            
    return render_template('contact.html', contact_info=contact_info)

@app.route('/join', methods=['GET', 'POST'])
def join():
    if request.method == 'POST':
        try:
            application = TeamApplication(
                full_name=request.form.get('full_name'),
                email=request.form.get('email'),
                phone=request.form.get('phone'),
                role=request.form.get('role'),
                experience=request.form.get('experience'),
                why_join=request.form.get('why_join'),
                status='pending'  # Set initial status as pending
            )
            db.session.add(application)
            db.session.commit()
            flash('Application submitted successfully! We will review it and get back to you soon.', 'success')
            return redirect(url_for('join'))
        except Exception as e:
            db.session.rollback()
            flash('An error occurred while submitting your application. Please try again.', 'error')
            return redirect(url_for('join'))
    return render_template('join.html')

# Admin routes
@app.route('/expx/login', methods=['GET', 'POST'])
def admin_login():
    try:
        if current_user.is_authenticated:
            if current_user.is_privileged:
                return redirect(url_for('admin_dashboard'))
            else:
                logout_user()
                flash('Access denied. Admin privileges required.', 'error')
                return render_template('admin/login.html')

        if request.method == 'POST':
            username = request.form.get('username')
            password = request.form.get('password')
            user = User.query.filter_by(username=username).first()

            if user and user.check_password(password):
                if user.is_privileged:
                    login_user(user, remember=True)
                    user.last_login = datetime.utcnow()
                    db.session.commit()
                    
                    # Send login notification email
                    user_role = 'Super Admin' if user.is_super_admin else 'Admin'
                    ip_address = request.remote_addr
                    user_agent = request.headers.get('User-Agent', 'Unknown')
                    send_login_notification_email(username, user_role, ip_address, user_agent)
                    
                    return redirect(url_for('admin_dashboard'))
                else:
                    flash('Access denied. Admin privileges required.', 'error')
            else:
                flash('Invalid username or password.', 'error')
    
    except Exception as e:
        flash(f'An unexpected error occurred: {e}', 'error')

    return render_template('admin/login.html')

@app.route('/expx/login=403')
def admin_login_403():
    return render_template('errors/403.html'), 403

@app.route('/expx/dashboard')
@login_required
def admin_dashboard():
    if not current_user.is_privileged:
        flash('Access denied. Admin privileges required.', 'error')
        return redirect(url_for('index'))
        
    events = Event.query.order_by(Event.date.desc()).all()
    members = TeamMember.query.all()
    users = User.query.all()
    contact_info = ContactInfo.query.first()
    new_messages_count = Contact.query.filter_by(is_read=False).count()
    recent_messages = Contact.query.order_by(Contact.created_at.desc()).limit(5).all()
    recent_applications = TeamApplication.query.order_by(TeamApplication.created_at.desc()).limit(5).all()
    
    return render_template('admin/dashboard.html', 
                         events=events, 
                         members=members, 
                         users=users,
                         contact_info=contact_info,
                         new_messages_count=new_messages_count,
                         recent_messages=recent_messages,
                         recent_applications=recent_applications)

# Event CRUD operations
@app.route('/expx/events/add', methods=['GET', 'POST'])
@login_required
def add_event():
    if not current_user.is_privileged:
        flash('Access denied. Admin privileges required.', 'error')
        return redirect(url_for('index'))
        
    if request.method == 'POST':
        title = request.form.get('title')
        description = request.form.get('description')
        date = datetime.strptime(request.form.get('date'), '%Y-%m-%dT%H:%M')
        location = request.form.get('location')
        
        event = Event(title=title, description=description, date=date, location=location)
        db.session.add(event)
        db.session.commit()
        flash('Event added successfully!', 'success')
        return redirect(url_for('admin_dashboard'))
    return render_template('admin/event_form.html')

@app.route('/expx/events/<int:id>/edit', methods=['GET', 'POST'])
@login_required
def edit_event(id):
    if not current_user.is_privileged:
        flash('Access denied. Admin privileges required.', 'error')
        return redirect(url_for('index'))
        
    event = Event.query.get_or_404(id)
    if request.method == 'POST':
        event.title = request.form.get('title')
        event.description = request.form.get('description')
        event.date = datetime.strptime(request.form.get('date'), '%Y-%m-%dT%H:%M')
        event.location = request.form.get('location')
        db.session.commit()
        flash('Event updated successfully!', 'success')
        return redirect(url_for('admin_dashboard'))
    return render_template('admin/event_form.html', event=event)

@app.route('/expx/events/<int:id>/delete', methods=['POST'])
@login_required
def delete_event(id):
    if not current_user.is_privileged:
        flash('Access denied. Admin privileges required.', 'error')
        return redirect(url_for('index'))
        
    event = Event.query.get_or_404(id)
    db.session.delete(event)
    db.session.commit()
    flash('Event deleted successfully!', 'success')
    return redirect(url_for('admin_dashboard'))

# Team Member CRUD operations
@app.route('/expx/team/add', methods=['GET', 'POST'])
@login_required
def add_team_member():
    if not current_user.is_privileged:
        flash('Access denied. Admin privileges required.', 'error')
        return redirect(url_for('index'))
        
    if request.method == 'POST':
        name = request.form.get('name')
        role = request.form.get('role')
        bio = request.form.get('bio')
        image_url = request.form.get('image_url')
        
        member = TeamMember(name=name, role=role, bio=bio, image_url=image_url)
        db.session.add(member)
        db.session.commit()
        flash('Team member added successfully!', 'success')
        return redirect(url_for('admin_dashboard'))
    return render_template('admin/team_member_form.html')

@app.route('/expx/team/<int:id>/edit', methods=['GET', 'POST'])
@login_required
def edit_team_member(id):
    if not current_user.is_privileged:
        flash('Access denied. Admin privileges required.', 'error')
        return redirect(url_for('index'))
        
    member = TeamMember.query.get_or_404(id)
    if request.method == 'POST':
        member.name = request.form.get('name')
        member.role = request.form.get('role')
        member.bio = request.form.get('bio')
        member.image_url = request.form.get('image_url')
        db.session.commit()
        flash('Team member updated successfully!', 'success')
        return redirect(url_for('admin_dashboard'))
    return render_template('admin/team_member_form.html', member=member)

@app.route('/expx/team/<int:id>/delete', methods=['POST'])
@login_required
def delete_team_member(id):
    if not current_user.is_privileged:
        flash('Access denied. Admin privileges required.', 'error')
        return redirect(url_for('index'))
        
    member = TeamMember.query.get_or_404(id)
    db.session.delete(member)
    db.session.commit()
    flash('Team member deleted successfully!', 'success')
    return redirect(url_for('admin_dashboard'))

# User CRUD operations
@app.route('/expx/users/add', methods=['GET', 'POST'])
@login_required
def add_user():
    if not current_user.is_privileged:
        flash('Access denied. Admin privileges required.', 'error')
        return redirect(url_for('index'))
        
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        is_admin = request.form.get('is_admin') == 'on'
        is_super_admin = request.form.get('is_super_admin') == 'on' and current_user.is_super_admin
        
        user = User(username=username, is_admin=is_admin, is_super_admin=is_super_admin)
        user.set_password(password)
        db.session.add(user)
        db.session.commit()
        flash('User added successfully!', 'success')
        return redirect(url_for('admin_dashboard'))
    return render_template('admin/user_form.html')

@app.route('/expx/users/<int:user_id>/edit', methods=['GET', 'POST'])
@login_required
def edit_user(user_id):
    if not current_user.is_privileged:
        return redirect(url_for('index'))
        
    user = User.query.get_or_404(user_id)
    
    # Allow users to edit their own profile
    if current_user.id == user_id:
        if request.method == 'POST':
            username = request.form.get('username')
            old_password = request.form.get('old_password')
            new_password = request.form.get('password')
            
            # Check if username is already taken
            existing_user = User.query.filter(User.username == username, User.id != user_id).first()
            if existing_user:
                flash('Username already taken.', 'error')
                return render_template('admin/edit_user.html', user=user)
            
            user.username = username
            if new_password:
                if not old_password:
                    flash('Old password is required to set a new password.', 'error')
                    return render_template('admin/edit_user.html', user=user)
                if not user.check_password(old_password):
                    flash('Invalid old password.', 'error')
                    return render_template('admin/edit_user.html', user=user)
                user.set_password(new_password)
            
            db.session.commit()
            flash('Profile updated successfully.', 'success')
            return redirect(url_for('admin_dashboard'))
        
        return render_template('admin/edit_user.html', user=user)
    
    # For editing other users
    # Block regular admins from editing other admins or super admins
    if (user.is_admin or user.is_super_admin) and not current_user.is_super_admin:
        flash('Only super admins can edit other admin or super admin users.', 'error')
        return redirect(url_for('admin_dashboard'))
    
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        is_admin = 'is_admin' in request.form
        is_super_admin = 'is_super_admin' in request.form
        
        # Only super admin can change admin status
        if current_user.is_super_admin:
            user.is_admin = is_admin
            user.is_super_admin = is_super_admin
        
        # Check if username is already taken
        existing_user = User.query.filter(User.username == username, User.id != user_id).first()
        if existing_user:
            flash('Username already taken.', 'error')
            return render_template('admin/edit_user.html', user=user)
        
        user.username = username
        if password:  # Only update password if a new one is provided
            user.set_password(password)
        
        db.session.commit()
        flash('User updated successfully.', 'success')
        return redirect(url_for('admin_dashboard'))
    
    return render_template('admin/edit_user.html', user=user)

@app.route('/expx/users/<int:id>/delete', methods=['POST'])
@login_required
def delete_user(id):
    if not current_user.is_privileged:
        flash('Access denied. Admin privileges required.', 'error')
        return redirect(url_for('index'))
        
    user = User.query.get_or_404(id)
    if user.id == current_user.id:
        flash('Cannot delete your own account!', 'error')
        return redirect(url_for('admin_dashboard'))
    
    if not current_user.can_delete_user(user):
        flash('You do not have permission to delete this user!', 'error')
        return redirect(url_for('admin_dashboard'))
        
    db.session.delete(user)
    db.session.commit()
    flash('User deleted successfully!', 'success')
    return redirect(url_for('admin_dashboard'))

@app.route('/expx/logout')
@login_required
def admin_logout():
    logout_user()
    flash('Logged out successfully', 'success')
    return redirect(url_for('index'))

# Contact Info CRUD operations
@app.route('/expx/contact-info/edit', methods=['GET', 'POST'])
@login_required
def edit_contact_info():
    if not current_user.is_privileged:
        flash('Access denied. Admin privileges required.', 'error')
        return redirect(url_for('index'))
        
    contact_info = ContactInfo.query.first()
    if not contact_info:
        contact_info = ContactInfo()
        db.session.add(contact_info)
        db.session.commit()
        
    if request.method == 'POST':
        contact_info.phone = request.form.get('phone')
        contact_info.email = request.form.get('email')
        contact_info.location = request.form.get('location')
        contact_info.office_hours = request.form.get('office_hours')
        db.session.commit()
        flash('Contact information updated successfully!', 'success')
        return redirect(url_for('admin_dashboard'))
    return render_template('admin/contact_info_form.html', contact_info=contact_info)

# Contact Messages Management
@app.route('/expx/contacts')
@login_required
def admin_contacts():
    if not current_user.is_privileged:
        flash('Access denied. Admin privileges required.', 'error')
        return redirect(url_for('index'))
        
    contacts = Contact.query.order_by(Contact.created_at.desc()).all()
    return render_template('admin/contacts.html', contacts=contacts)

@app.route('/expx/contacts/<int:id>/view')
@login_required
def view_contact(id):
    if not current_user.is_privileged:
        flash('Access denied. Admin privileges required.', 'error')
        return redirect(url_for('index'))
        
    contact = Contact.query.get_or_404(id)
    contact.is_read = True
    db.session.commit()
    return render_template('admin/contact_view.html', contact=contact)

@app.route('/expx/contacts/<int:id>/delete', methods=['POST'])
@login_required
def delete_contact(id):
    if not current_user.is_privileged:
        flash('Access denied. Admin privileges required.', 'error')
        return redirect(url_for('index'))
        
    contact = Contact.query.get_or_404(id)
    db.session.delete(contact)
    db.session.commit()
    flash('Contact message deleted successfully!', 'success')
    return redirect(url_for('admin_contacts'))

# Team Applications Management
@app.route('/expx/applications')
@login_required
def admin_applications():
    if not current_user.is_privileged:
        flash('Access denied. Admin privileges required.', 'error')
        return redirect(url_for('index'))
    
    applications = TeamApplication.query.order_by(TeamApplication.created_at.desc()).all()
    return render_template('admin/applications.html', applications=applications)

@app.route('/expx/applications/<int:id>/view')
@login_required
def view_application(id):
    if not current_user.is_privileged:
        flash('Access denied. Admin privileges required.', 'error')
        return redirect(url_for('index'))
    
    application = TeamApplication.query.get_or_404(id)
    return render_template('admin/application_view.html', application=application)

@app.route('/expx/applications/<int:id>/update', methods=['POST'])
@login_required
def update_application(id):
    if not current_user.is_privileged:
        flash('Access denied. Admin privileges required.', 'error')
        return redirect(url_for('index'))
    
    application = TeamApplication.query.get_or_404(id)
    application.status = request.form.get('status')
    application.notes = request.form.get('notes')
    db.session.commit()
    flash('Application status updated successfully!', 'success')
    return redirect(url_for('admin_applications'))

@app.route('/expx/applications/<int:id>/delete', methods=['POST'])
@login_required
def delete_application(id):
    if not current_user.is_privileged:
        flash('Access denied. Admin privileges required.', 'error')
        return redirect(url_for('index'))
    
    application = TeamApplication.query.get_or_404(id)
    db.session.delete(application)
    db.session.commit()
    flash('Application deleted successfully!', 'success')
    return redirect(url_for('admin_applications'))

# --- TEMPORARY ADMIN & SUPERADMIN PASSWORD RESET ROUTE ---
@app.route('/expx/reset_admin_passwords')
def reset_admin_passwords():
    admin_user = User.query.filter_by(username='admin').first()
    superadmin_user = User.query.filter_by(username='superadmin').first()
    msg = []
    if admin_user:
        admin_user.set_password('YourNewPassword123!')
        admin_user.is_admin = True
        admin_user.is_super_admin = True
        msg.append("Admin password reset to YourNewPassword123! and privileges set.")
    else:
        msg.append("Admin user not found.")
    if superadmin_user:
        superadmin_user.set_password('YourSuperAdminPassword123!')
        superadmin_user.is_admin = True
        superadmin_user.is_super_admin = True
        msg.append("Superadmin password reset to YourSuperAdminPassword123! and privileges set.")
    else:
        msg.append("Superadmin user not found.")
    db.session.commit()
    return "<br>".join(msg) + "<br>Remove this route after use!"
# --- END TEMPORARY ROUTE ---

@app.context_processor
def inject_contact_info():
    contact_info = None
    try:
        contact_info = ContactInfo.query.first()
    except Exception:
        pass
    return dict(contact_info=contact_info)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=2010, debug=True) 