#!/usr/bin/env python3
"""
Fix Login Script for ExploitX
This script creates a proper admin user and tests the login functionality.
"""

from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime
import pymysql

# Create Flask app
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root:root@localhost/exploitx'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

# User model
class User(db.Model):
    __tablename__ = 'user'
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password_hash = db.Column(db.String(255), nullable=False)
    is_admin = db.Column(db.Boolean, default=False)
    is_super_admin = db.Column(db.Boolean, default=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    last_login = db.Column(db.DateTime)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

def fix_login():
    """Fix the login issue by creating a proper admin user"""
    try:
        with app.app_context():
            # Check if admin user exists
            admin_user = User.query.filter_by(username='admin').first()
            
            if admin_user:
                print(f"Admin user found: {admin_user.username}")
                print(f"Is admin: {admin_user.is_admin}")
                print(f"Is super admin: {admin_user.is_super_admin}")
                
                # Test password
                test_password = "admin123"
                admin_user.set_password(test_password)
                admin_user.is_admin = True
                admin_user.is_super_admin = True
                db.session.commit()
                
                # Verify password works
                if admin_user.check_password(test_password):
                    print("✅ Password hashing is working correctly")
                else:
                    print("❌ Password hashing is not working")
                    return False
                    
                print(f"\n🔑 Login Credentials:")
                print(f"Username: admin")
                print(f"Password: {test_password}")
                
            else:
                print("No admin user found. Creating one...")
                
                # Create admin user
                admin_user = User(
                    username='admin',
                    is_admin=True,
                    is_super_admin=True
                )
                admin_user.set_password('admin123')
                
                db.session.add(admin_user)
                db.session.commit()
                
                print("✅ Admin user created successfully!")
                print(f"\n🔑 Login Credentials:")
                print(f"Username: admin")
                print(f"Password: admin123")
            
            # Test the login process
            print(f"\n🧪 Testing login process...")
            
            # Test 1: Check if user exists
            test_user = User.query.filter_by(username='admin').first()
            if test_user:
                print("✅ User lookup works")
            else:
                print("❌ User lookup failed")
                return False
            
            # Test 2: Check password verification
            if test_user.check_password('admin123'):
                print("✅ Password verification works")
            else:
                print("❌ Password verification failed")
                return False
            
            # Test 3: Check admin privileges
            if test_user.is_admin and test_user.is_super_admin:
                print("✅ Admin privileges are set correctly")
            else:
                print("❌ Admin privileges are not set correctly")
                return False
            
            print(f"\n🎉 Login system is working correctly!")
            print(f"📝 You can now login with:")
            print(f"   Username: admin")
            print(f"   Password: admin123")
            print(f"\n🌐 Go to: http://localhost:5000/admin/login")
            
            return True
            
    except Exception as e:
        print(f"❌ Error fixing login: {e}")
        print(f"\n🔧 Troubleshooting:")
        print(f"1. Make sure MySQL is running")
        print(f"2. Check if database 'exploitx' exists")
        print(f"3. Verify MySQL credentials (root/root)")
        print(f"4. Try running: mysql -u root -p")
        return False

if __name__ == "__main__":
    print("🔧 Fixing ExploitX Login System...")
    print("=" * 50)
    
    if fix_login():
        print("\n✅ Login system fixed successfully!")
    else:
        print("\n❌ Failed to fix login system!") 