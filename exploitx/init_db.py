from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash
from datetime import datetime, timedelta
import time
import pymysql
import os
import sys

# Create Flask app
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root:root@db/exploitx'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SQLALCHEMY_ENGINE_OPTIONS'] = {
    'pool_size': 10,
    'pool_recycle': 3600,
    'pool_pre_ping': True
}
db = SQLAlchemy(app)

# Define models with security enhancements
class User(db.Model):
    __tablename__ = 'user'
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password_hash = db.Column(db.String(255), nullable=False)
    is_admin = db.Column(db.Boolean, default=False)
    is_super_admin = db.Column(db.Boolean, default=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    last_login = db.Column(db.DateTime)
    failed_login_attempts = db.Column(db.Integer, default=0)
    account_locked_until = db.Column(db.DateTime)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

class Event(db.Model):
    __tablename__ = 'event'
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    description = db.Column(db.Text, nullable=False)
    date = db.Column(db.DateTime, nullable=False)
    location = db.Column(db.String(200))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class TeamMember(db.Model):
    __tablename__ = 'team_member'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    role = db.Column(db.String(100))
    bio = db.Column(db.Text)
    image_url = db.Column(db.String(200))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class ContactInfo(db.Model):
    __tablename__ = 'contact_info'
    id = db.Column(db.Integer, primary_key=True)
    phone = db.Column(db.String(20))
    email = db.Column(db.String(120))
    location = db.Column(db.String(200))
    office_hours = db.Column(db.String(200))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class Contact(db.Model):
    __tablename__ = 'contact'
    id = db.Column(db.Integer, primary_key=True)
    full_name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(120), nullable=False)
    subject = db.Column(db.String(200), nullable=False)
    message = db.Column(db.Text, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    is_read = db.Column(db.Boolean, default=False)
    ip_address = db.Column(db.String(45))  # Store IP for security monitoring

class TeamApplication(db.Model):
    __tablename__ = 'team_application'
    id = db.Column(db.Integer, primary_key=True)
    full_name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(120), nullable=False)
    phone = db.Column(db.String(20))
    role = db.Column(db.String(100), nullable=False)
    experience = db.Column(db.Text)
    why_join = db.Column(db.Text, nullable=False)
    status = db.Column(db.String(20), default='pending')
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    notes = db.Column(db.Text)
    ip_address = db.Column(db.String(45))  # Store IP for security monitoring

def wait_for_mysql(max_attempts=30):
    """Wait for MySQL to be ready"""
    print("Waiting for MySQL to be ready...")
    for attempt in range(max_attempts):
        try:
            connection = pymysql.connect(
                host='db',
                user='root',
                password='root',
                charset='utf8mb4'
            )
            connection.close()
            print("MySQL is ready!")
            return True
        except pymysql.Error as e:
            print(f"Attempt {attempt + 1}/{max_attempts}: MySQL not ready yet ({e})")
            if attempt < max_attempts - 1:
                time.sleep(2)
    return False

def create_database():
    """Create the database if it doesn't exist"""
    try:
        connection = pymysql.connect(
            host='db',
            user='root',
            password='root',
            charset='utf8mb4'
        )
        
        with connection.cursor() as cursor:
            cursor.execute("CREATE DATABASE IF NOT EXISTS exploitx CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci")
            print("Database 'exploitx' created or already exists")
        
        connection.close()
        return True
    except Exception as e:
        print(f"Error creating database: {e}")
        return False

def init_database():
    """Initialize the database with tables and initial data"""
    try:
        connection = pymysql.connect(
            host='db',
            user='root',
            password='root',
            database='exploitx',
            charset='utf8mb4'
        )
        
        with connection.cursor() as cursor:
            # Create tables with security enhancements
            tables = [
                """
                CREATE TABLE IF NOT EXISTS user (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    username VARCHAR(80) UNIQUE NOT NULL,
                    password_hash VARCHAR(255) NOT NULL,
                    is_admin BOOLEAN DEFAULT FALSE,
                    is_super_admin BOOLEAN DEFAULT FALSE,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    last_login DATETIME NULL,
                    failed_login_attempts INT DEFAULT 0,
                    account_locked_until DATETIME NULL,
                    INDEX idx_username (username),
                    INDEX idx_is_admin (is_admin),
                    INDEX idx_is_super_admin (is_super_admin)
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
                """,
                
                """
                CREATE TABLE IF NOT EXISTS event (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    title VARCHAR(100) NOT NULL,
                    description TEXT NOT NULL,
                    date DATETIME NOT NULL,
                    location VARCHAR(200),
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                    INDEX idx_date (date),
                    INDEX idx_created_at (created_at)
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
                """,
                
                """
                CREATE TABLE IF NOT EXISTS team_member (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    name VARCHAR(100) NOT NULL,
                    role VARCHAR(100),
                    bio TEXT,
                    image_url VARCHAR(200),
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                    INDEX idx_name (name)
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
                """,
                
                """
                CREATE TABLE IF NOT EXISTS contact_info (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    phone VARCHAR(20),
                    email VARCHAR(120),
                    location VARCHAR(200),
                    office_hours VARCHAR(200),
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
                """,
                
                """
                CREATE TABLE IF NOT EXISTS contact (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    full_name VARCHAR(100) NOT NULL,
                    email VARCHAR(120) NOT NULL,
                    subject VARCHAR(200) NOT NULL,
                    message TEXT NOT NULL,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    is_read BOOLEAN DEFAULT FALSE,
                    ip_address VARCHAR(45),
                    INDEX idx_email (email),
                    INDEX idx_created_at (created_at),
                    INDEX idx_is_read (is_read),
                    INDEX idx_ip_address (ip_address)
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
                """,
                
                """
                CREATE TABLE IF NOT EXISTS team_application (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    full_name VARCHAR(100) NOT NULL,
                    email VARCHAR(120) NOT NULL,
                    phone VARCHAR(20),
                    role VARCHAR(100) NOT NULL,
                    experience TEXT,
                    why_join TEXT NOT NULL,
                    status VARCHAR(20) DEFAULT 'pending',
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                    notes TEXT,
                    ip_address VARCHAR(45),
                    INDEX idx_email (email),
                    INDEX idx_status (status),
                    INDEX idx_created_at (created_at),
                    INDEX idx_ip_address (ip_address)
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
                """
            ]
            
            for table_sql in tables:
                cursor.execute(table_sql)
                print(f"Table created successfully")
            
            # Check if super admin exists
            cursor.execute("SELECT COUNT(*) FROM user WHERE is_super_admin = TRUE")
            super_admin_count = cursor.fetchone()[0]
            
            if super_admin_count == 0:
                print("No super admin found, creating default super admin and admin users...")
                super_admin_password = generate_password_hash('superpassword')
                admin_password = generate_password_hash('password')
                
                cursor.execute(
                    """
                    INSERT INTO user (username, password_hash, is_admin, is_super_admin)
                    VALUES ('superadmin', %s, TRUE, TRUE), ('admin', %s, TRUE, FALSE)
                    """,
                    (super_admin_password, admin_password)
                )
                print("Default super admin and admin users created.")
            else:
                print("Super admin already exists, skipping user creation.")
            
            # Check if contact info exists
            cursor.execute("SELECT COUNT(*) FROM contact_info")
            contact_info_count = cursor.fetchone()[0]
            
            if contact_info_count == 0:
                # Insert default contact info
                cursor.execute("""
                    INSERT INTO contact_info (phone, email, location, office_hours)
                    VALUES (%s, %s, %s, %s)
                """, ('+1 (555) 123-4567', 'contact@exploitx.com', 'University Campus, Building A', 'Mon-Fri 9:00 AM - 5:00 PM'))
                print("Default contact information created")
            
            # Check if team members exist
            cursor.execute("SELECT COUNT(*) FROM team_member")
            team_member_count = cursor.fetchone()[0]
            
            if team_member_count == 0:
                # Insert sample team members
                sample_members = [
                    ('John Doe', 'Team Lead', 'Experienced cybersecurity professional with expertise in penetration testing and incident response.', 'https://via.placeholder.com/150'),
                    ('Jane Smith', 'Security Analyst', 'Specializes in threat intelligence and vulnerability assessment.', 'https://via.placeholder.com/150'),
                    ('Mike Johnson', 'CTF Coordinator', 'Organizes and manages Capture The Flag competitions and training sessions.', 'https://via.placeholder.com/150')
                ]
                
                for name, role, bio, image_url in sample_members:
                    cursor.execute("""
                        INSERT INTO team_member (name, role, bio, image_url, created_at)
                        VALUES (%s, %s, %s, %s, %s)
                    """, (name, role, bio, image_url, datetime.utcnow()))
                
                print("Sample team members created")
            
            # Check if events exist
            cursor.execute("SELECT COUNT(*) FROM event")
            event_count = cursor.fetchone()[0]
            
            if event_count == 0:
                # Insert sample events
                sample_events = [
                    ('CTF Workshop', 'Learn the basics of Capture The Flag competitions', datetime.utcnow() + timedelta(days=7), 'Computer Lab 101'),
                    ('Security Seminar', 'Advanced topics in cybersecurity', datetime.utcnow() + timedelta(days=14), 'Auditorium A'),
                    ('Hackathon', '24-hour coding and security challenge', datetime.utcnow() + timedelta(days=21), 'Innovation Center')
                ]
                
                for title, description, date, location in sample_events:
                    cursor.execute("""
                        INSERT INTO event (title, description, date, location, created_at)
                        VALUES (%s, %s, %s, %s, %s)
                    """, (title, description, date, location, datetime.utcnow()))
                
                print("Sample events created")
            
            connection.commit()
            print("Database initialization completed successfully!")
        
        connection.close()
        return True
        
    except Exception as e:
        print(f"Error initializing database: {e}")
        return False

def main():
    """Main initialization function"""
    print("Starting database initialization...")
    
    # Wait for MySQL to be ready
    if not wait_for_mysql():
        print("Failed to connect to MySQL. Exiting.")
        sys.exit(1)
    
    # Create database
    if not create_database():
        print("Failed to create database. Exiting.")
        sys.exit(1)
    
    # Initialize database
    if not init_database():
        print("Failed to initialize database. Exiting.")
        sys.exit(1)
    
    print("Database initialization completed successfully!")

if __name__ == "__main__":
    main() 